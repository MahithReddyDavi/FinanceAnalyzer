{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport OpenAI from \"openai\";\nimport { PieChart, Pie, Cell, LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, AreaChart, Area } from \"recharts\";\nimport API_BASE_URL from \"../config\";\nimport Sidebar from \"../components/Sidebar\";\nimport \"../styles/Dashboard.css\";\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884d8\", \"#82ca9d\"];\nconst Dashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const [expenses, setExpenses] = useState([]);\n  // ... (keep all your existing state declarations)\n\n  // Initialize OpenAI client\n  const openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_KEY,\n    dangerouslyAllowBrowser: true // This is needed for client-side usage\n  });\n\n  // ... (keep all your existing functions until handleMessageSend)\n\n  const handleMessageSend = async () => {\n    if (!newMessage.trim()) return;\n\n    // Add user message\n    const userMsg = {\n      sender: 'user',\n      text: newMessage\n    };\n    setMessages(prev => [...prev, userMsg]);\n    setNewMessage('');\n    setAiLoading(true);\n    try {\n      // Get AI response using the new API format\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"system\",\n          content: `You are a helpful financial assistant analyzing this user's expenses. \n            Their categories: ${categoryTotals.map(c => c.name).join(', ')}. \n            Total expenses: ${formatCurrency(totalExpenses)}. \n            Keep responses brief (1-2 sentences), financial-focused, and friendly.`\n        }, {\n          role: \"user\",\n          content: newMessage\n        }],\n        temperature: 0.7,\n        max_tokens: 150\n      });\n      const aiText = response.choices[0].message.content;\n      const aiMsg = {\n        sender: 'ai',\n        text: aiText\n      };\n      setMessages(prev => [...prev, aiMsg]);\n    } catch (error) {\n      console.error(\"Error calling OpenAI:\", error);\n      const aiMsg = {\n        sender: 'ai',\n        text: \"Sorry, I'm having trouble responding. Please try again later.\"\n      };\n      setMessages(prev => [...prev, aiMsg]);\n    } finally {\n      setAiLoading(false);\n      setTimeout(() => {\n        const chatBody = document.querySelector('.chat-body');\n        if (chatBody) chatBody.scrollTop = chatBody.scrollHeight;\n      }, 100);\n    }\n  };\n\n  // ... (keep the rest of your component exactly the same)\n};\n_s(Dashboard, \"VNEQbg23RJF92qCE5kwy6TRSjUY=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","OpenAI","PieChart","Pie","Cell","LineChart","Line","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","AreaChart","Area","API_BASE_URL","Sidebar","COLORS","Dashboard","_s","navigate","expenses","setExpenses","openai","apiKey","process","env","REACT_APP_OPENAI_KEY","dangerouslyAllowBrowser","handleMessageSend","newMessage","trim","userMsg","sender","text","setMessages","prev","setNewMessage","setAiLoading","response","chat","completions","create","model","messages","role","content","categoryTotals","map","c","name","join","formatCurrency","totalExpenses","temperature","max_tokens","aiText","choices","message","aiMsg","error","console","setTimeout","chatBody","document","querySelector","scrollTop","scrollHeight","_c","$RefreshReg$"],"sources":["C:/Users/uppal/OneDrive/Desktop/financial assistant/frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport OpenAI from \"openai\";\nimport {\n  PieChart, Pie, Cell, LineChart, Line, BarChart, Bar,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  AreaChart, Area\n} from \"recharts\";\nimport API_BASE_URL from \"../config\";\nimport Sidebar from \"../components/Sidebar\";\nimport \"../styles/Dashboard.css\";\n\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884d8\", \"#82ca9d\"];\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n  const [expenses, setExpenses] = useState([]);\n  // ... (keep all your existing state declarations)\n\n  // Initialize OpenAI client\n  const openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_KEY,\n    dangerouslyAllowBrowser: true // This is needed for client-side usage\n  });\n\n  // ... (keep all your existing functions until handleMessageSend)\n\n  const handleMessageSend = async () => {\n    if (!newMessage.trim()) return;\n\n    // Add user message\n    const userMsg = { sender: 'user', text: newMessage };\n    setMessages(prev => [...prev, userMsg]);\n    setNewMessage('');\n    setAiLoading(true);\n\n    try {\n      // Get AI response using the new API format\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a helpful financial assistant analyzing this user's expenses. \n            Their categories: ${categoryTotals.map(c => c.name).join(', ')}. \n            Total expenses: ${formatCurrency(totalExpenses)}. \n            Keep responses brief (1-2 sentences), financial-focused, and friendly.`\n          },\n          {\n            role: \"user\",\n            content: newMessage\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 150\n      });\n\n      const aiText = response.choices[0].message.content;\n      const aiMsg = { sender: 'ai', text: aiText };\n      setMessages(prev => [...prev, aiMsg]);\n    } catch (error) {\n      console.error(\"Error calling OpenAI:\", error);\n      const aiMsg = { \n        sender: 'ai', \n        text: \"Sorry, I'm having trouble responding. Please try again later.\" \n      };\n      setMessages(prev => [...prev, aiMsg]);\n    } finally {\n      setAiLoading(false);\n      setTimeout(() => {\n        const chatBody = document.querySelector('.chat-body');\n        if (chatBody) chatBody.scrollTop = chatBody.scrollHeight;\n      }, 100);\n    }\n  };\n\n  // ... (keep the rest of your component exactly the same)\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}