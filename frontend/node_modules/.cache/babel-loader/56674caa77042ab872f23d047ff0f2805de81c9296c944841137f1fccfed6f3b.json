{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { sleep, isRequestOptions } from \"../../core.mjs\";\nimport { CursorPage, Page } from \"../../pagination.mjs\";\nexport class Files extends APIResource {\n  /**\n   * Create a vector store file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to a\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n   */\n  create(vectorStoreId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/files`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a vector store file.\n   */\n  retrieve(vectorStoreId, fileId, options) {\n    return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Update attributes on a vector store file.\n   */\n  update(vectorStoreId, fileId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(vectorStoreId, query = {}, options) {\n    if (isRequestOptions(query)) {\n      return this.list(vectorStoreId, {}, query);\n    }\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete a vector store file. This will remove the file from the vector store but\n   * the file itself will not be deleted. To delete the file, use the\n   * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n   * endpoint.\n   */\n  del(vectorStoreId, fileId, options) {\n    return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Attach a file to the given vector store and wait for it to be processed.\n   */\n  async createAndPoll(vectorStoreId, body, options) {\n    const file = await this.create(vectorStoreId, body, options);\n    return await this.poll(vectorStoreId, file.id, options);\n  }\n  /**\n   * Wait for the vector store file to finish processing.\n   *\n   * Note: this will return even if the file failed to process, you need to check\n   * file.last_error and file.status to handle these cases\n   */\n  async poll(vectorStoreId, fileId, options) {\n    const headers = {\n      ...options?.headers,\n      'X-Stainless-Poll-Helper': 'true'\n    };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const fileResponse = await this.retrieve(vectorStoreId, fileId, {\n        ...options,\n        headers\n      }).withResponse();\n      const file = fileResponse.data;\n      switch (file.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return file;\n      }\n    }\n  }\n  /**\n   * Upload a file to the `files` API and then attach it to the given vector store.\n   *\n   * Note the file will be asynchronously processed (you can use the alternative\n   * polling helper method to wait for processing to complete).\n   */\n  async upload(vectorStoreId, file, options) {\n    const fileInfo = await this._client.files.create({\n      file: file,\n      purpose: 'assistants'\n    }, options);\n    return this.create(vectorStoreId, {\n      file_id: fileInfo.id\n    }, options);\n  }\n  /**\n   * Add a file to a vector store and poll until processing is complete.\n   */\n  async uploadAndPoll(vectorStoreId, file, options) {\n    const fileInfo = await this.upload(vectorStoreId, file, options);\n    return await this.poll(vectorStoreId, fileInfo.id, options);\n  }\n  /**\n   * Retrieve the parsed contents of a vector store file.\n   */\n  content(vectorStoreId, fileId, options) {\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files/${fileId}/content`, FileContentResponsesPage, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}\nexport class VectorStoreFilesPage extends CursorPage {}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FileContentResponsesPage extends Page {}\nFiles.VectorStoreFilesPage = VectorStoreFilesPage;\nFiles.FileContentResponsesPage = FileContentResponsesPage;","map":{"version":3,"names":["APIResource","sleep","isRequestOptions","CursorPage","Page","Files","create","vectorStoreId","body","options","_client","post","headers","retrieve","fileId","get","update","list","query","getAPIList","VectorStoreFilesPage","del","delete","createAndPoll","file","poll","id","pollIntervalMs","toString","fileResponse","withResponse","data","status","sleepInterval","headerInterval","response","headerIntervalMs","parseInt","isNaN","upload","fileInfo","files","purpose","file_id","uploadAndPoll","content","FileContentResponsesPage"],"sources":["../../src/resources/vector-stores/files.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}